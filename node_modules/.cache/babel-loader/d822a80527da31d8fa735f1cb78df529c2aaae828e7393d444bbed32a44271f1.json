{"ast":null,"code":"var _jsxFileName = \"D:\\\\rvce\\\\src\\\\components\\\\UploadForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadForm = ({\n  onUpload,\n  isLoading\n}) => {\n  _s();\n  const [youtubeUrl, setYoutubeUrl] = useState('');\n  const [pdfFile, setPdfFile] = useState(null);\n  const handleYoutubeSubmit = async e => {\n    e.preventDefault();\n    if (!youtubeUrl) return;\n\n    // TODO: Implement YouTube transcript extraction\n    // For now, we'll use a mock transcript\n    const mockTranscript = \"This is a mock transcript from the YouTube video. In a real implementation, we would extract the actual transcript using a YouTube API or service.\";\n    onUpload(mockTranscript);\n  };\n  const handlePdfUpload = async e => {\n    var _e$target$files;\n    const file = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n    if (!file) return;\n    setPdfFile(file);\n    const reader = new FileReader();\n    reader.onload = async event => {\n      var _event$target;\n      const typedArray = new Uint8Array((_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result);\n      const pdf = await pdfjsLib.getDocument(typedArray).promise;\n      let fullText = '';\n      for (let i = 1; i <= pdf.numPages; i++) {\n        const page = await pdf.getPage(i);\n        const textContent = await page.getTextContent();\n        const pageText = textContent.items.map(item => item.str).join(' ');\n        fullText += pageText + '\\n';\n      }\n      onUpload(fullText);\n    };\n    reader.readAsArrayBuffer(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white p-6 rounded-lg shadow-md\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-4\",\n        children: \"Upload YouTube Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleYoutubeSubmit,\n        className: \"space-y-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"url\",\n          value: youtubeUrl,\n          onChange: e => setYoutubeUrl(e.target.value),\n          placeholder: \"Enter YouTube URL\",\n          className: \"w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\",\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isLoading || !youtubeUrl,\n          className: \"w-full bg-primary text-white py-2 px-4 rounded-md hover:bg-primary/90 disabled:opacity-50\",\n          children: isLoading ? 'Processing...' : 'Analyze Video'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white p-6 rounded-lg shadow-md\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-4\",\n        children: \"Upload PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".pdf\",\n          onChange: handlePdfUpload,\n          className: \"w-full\",\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), pdfFile && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-600\",\n          children: [\"Selected file: \", pdfFile.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadForm, \"1+IU/TrnkDlf7MQT1mkYMzQgnwI=\");\n_c = UploadForm;\nexport default UploadForm;\nvar _c;\n$RefreshReg$(_c, \"UploadForm\");","map":{"version":3,"names":["React","useState","pdfjsLib","jsxDEV","_jsxDEV","UploadForm","onUpload","isLoading","_s","youtubeUrl","setYoutubeUrl","pdfFile","setPdfFile","handleYoutubeSubmit","e","preventDefault","mockTranscript","handlePdfUpload","_e$target$files","file","target","files","reader","FileReader","onload","event","_event$target","typedArray","Uint8Array","result","pdf","getDocument","promise","fullText","i","numPages","page","getPage","textContent","getTextContent","pageText","items","map","item","str","join","readAsArrayBuffer","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","placeholder","disabled","accept","name","_c","$RefreshReg$"],"sources":["D:/rvce/src/components/UploadForm.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport * as pdfjsLib from 'pdfjs-dist';\r\n\r\ninterface UploadFormProps {\r\n  onUpload: (content: string) => void;\r\n  isLoading: boolean;\r\n}\r\n\r\nconst UploadForm: React.FC<UploadFormProps> = ({ onUpload, isLoading }) => {\r\n  const [youtubeUrl, setYoutubeUrl] = useState('');\r\n  const [pdfFile, setPdfFile] = useState<File | null>(null);\r\n\r\n  const handleYoutubeSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!youtubeUrl) return;\r\n\r\n    // TODO: Implement YouTube transcript extraction\r\n    // For now, we'll use a mock transcript\r\n    const mockTranscript = \"This is a mock transcript from the YouTube video. In a real implementation, we would extract the actual transcript using a YouTube API or service.\";\r\n    onUpload(mockTranscript);\r\n  };\r\n\r\n  const handlePdfUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (!file) return;\r\n\r\n    setPdfFile(file);\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = async (event) => {\r\n      const typedArray = new Uint8Array(event.target?.result as ArrayBuffer);\r\n      const pdf = await pdfjsLib.getDocument(typedArray).promise;\r\n      let fullText = '';\r\n\r\n      for (let i = 1; i <= pdf.numPages; i++) {\r\n        const page = await pdf.getPage(i);\r\n        const textContent = await page.getTextContent();\r\n        const pageText = textContent.items.map((item: any) => item.str).join(' ');\r\n        fullText += pageText + '\\n';\r\n      }\r\n\r\n      onUpload(fullText);\r\n    };\r\n\r\n    reader.readAsArrayBuffer(file);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Upload YouTube Video</h2>\r\n        <form onSubmit={handleYoutubeSubmit} className=\"space-y-4\">\r\n          <input\r\n            type=\"url\"\r\n            value={youtubeUrl}\r\n            onChange={(e) => setYoutubeUrl(e.target.value)}\r\n            placeholder=\"Enter YouTube URL\"\r\n            className=\"w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\r\n            disabled={isLoading}\r\n          />\r\n          <button\r\n            type=\"submit\"\r\n            disabled={isLoading || !youtubeUrl}\r\n            className=\"w-full bg-primary text-white py-2 px-4 rounded-md hover:bg-primary/90 disabled:opacity-50\"\r\n          >\r\n            {isLoading ? 'Processing...' : 'Analyze Video'}\r\n          </button>\r\n        </form>\r\n      </div>\r\n\r\n      <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Upload PDF</h2>\r\n        <div className=\"space-y-4\">\r\n          <input\r\n            type=\"file\"\r\n            accept=\".pdf\"\r\n            onChange={handlePdfUpload}\r\n            className=\"w-full\"\r\n            disabled={isLoading}\r\n          />\r\n          {pdfFile && (\r\n            <p className=\"text-sm text-gray-600\">\r\n              Selected file: {pdfFile.name}\r\n            </p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadForm; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,KAAKC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOvC,MAAMC,UAAqC,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACzE,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAc,IAAI,CAAC;EAEzD,MAAMY,mBAAmB,GAAG,MAAOC,CAAkB,IAAK;IACxDA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI,CAACN,UAAU,EAAE;;IAEjB;IACA;IACA,MAAMO,cAAc,GAAG,oJAAoJ;IAC3KV,QAAQ,CAACU,cAAc,CAAC;EAC1B,CAAC;EAED,MAAMC,eAAe,GAAG,MAAOH,CAAsC,IAAK;IAAA,IAAAI,eAAA;IACxE,MAAMC,IAAI,IAAAD,eAAA,GAAGJ,CAAC,CAACM,MAAM,CAACC,KAAK,cAAAH,eAAA,uBAAdA,eAAA,CAAiB,CAAC,CAAC;IAChC,IAAI,CAACC,IAAI,EAAE;IAEXP,UAAU,CAACO,IAAI,CAAC;IAChB,MAAMG,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAE/BD,MAAM,CAACE,MAAM,GAAG,MAAOC,KAAK,IAAK;MAAA,IAAAC,aAAA;MAC/B,MAAMC,UAAU,GAAG,IAAIC,UAAU,EAAAF,aAAA,GAACD,KAAK,CAACL,MAAM,cAAAM,aAAA,uBAAZA,aAAA,CAAcG,MAAqB,CAAC;MACtE,MAAMC,GAAG,GAAG,MAAM5B,QAAQ,CAAC6B,WAAW,CAACJ,UAAU,CAAC,CAACK,OAAO;MAC1D,IAAIC,QAAQ,GAAG,EAAE;MAEjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIJ,GAAG,CAACK,QAAQ,EAAED,CAAC,EAAE,EAAE;QACtC,MAAME,IAAI,GAAG,MAAMN,GAAG,CAACO,OAAO,CAACH,CAAC,CAAC;QACjC,MAAMI,WAAW,GAAG,MAAMF,IAAI,CAACG,cAAc,CAAC,CAAC;QAC/C,MAAMC,QAAQ,GAAGF,WAAW,CAACG,KAAK,CAACC,GAAG,CAAEC,IAAS,IAAKA,IAAI,CAACC,GAAG,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;QACzEZ,QAAQ,IAAIO,QAAQ,GAAG,IAAI;MAC7B;MAEAlC,QAAQ,CAAC2B,QAAQ,CAAC;IACpB,CAAC;IAEDX,MAAM,CAACwB,iBAAiB,CAAC3B,IAAI,CAAC;EAChC,CAAC;EAED,oBACEf,OAAA;IAAK2C,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxB5C,OAAA;MAAK2C,SAAS,EAAC,mCAAmC;MAAAC,QAAA,gBAChD5C,OAAA;QAAI2C,SAAS,EAAC,4BAA4B;QAAAC,QAAA,EAAC;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpEhD,OAAA;QAAMiD,QAAQ,EAAExC,mBAAoB;QAACkC,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACxD5C,OAAA;UACEkD,IAAI,EAAC,KAAK;UACVC,KAAK,EAAE9C,UAAW;UAClB+C,QAAQ,EAAG1C,CAAC,IAAKJ,aAAa,CAACI,CAAC,CAACM,MAAM,CAACmC,KAAK,CAAE;UAC/CE,WAAW,EAAC,mBAAmB;UAC/BV,SAAS,EAAC,uFAAuF;UACjGW,QAAQ,EAAEnD;QAAU;UAAA0C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrB,CAAC,eACFhD,OAAA;UACEkD,IAAI,EAAC,QAAQ;UACbI,QAAQ,EAAEnD,SAAS,IAAI,CAACE,UAAW;UACnCsC,SAAS,EAAC,2FAA2F;UAAAC,QAAA,EAEpGzC,SAAS,GAAG,eAAe,GAAG;QAAe;UAAA0C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,eAENhD,OAAA;MAAK2C,SAAS,EAAC,mCAAmC;MAAAC,QAAA,gBAChD5C,OAAA;QAAI2C,SAAS,EAAC,4BAA4B;QAAAC,QAAA,EAAC;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1DhD,OAAA;QAAK2C,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACxB5C,OAAA;UACEkD,IAAI,EAAC,MAAM;UACXK,MAAM,EAAC,MAAM;UACbH,QAAQ,EAAEvC,eAAgB;UAC1B8B,SAAS,EAAC,QAAQ;UAClBW,QAAQ,EAAEnD;QAAU;UAAA0C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrB,CAAC,EACDzC,OAAO,iBACNP,OAAA;UAAG2C,SAAS,EAAC,uBAAuB;UAAAC,QAAA,GAAC,iBACpB,EAACrC,OAAO,CAACiD,IAAI;QAAA;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3B,CACJ;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC5C,EAAA,CAjFIH,UAAqC;AAAAwD,EAAA,GAArCxD,UAAqC;AAmF3C,eAAeA,UAAU;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}