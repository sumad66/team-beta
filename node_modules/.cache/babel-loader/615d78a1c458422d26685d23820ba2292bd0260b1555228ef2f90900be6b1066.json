{"ast":null,"code":"import axios from 'axios';\nexport const extractVideoId = url => {\n  const regExp = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n  const match = url.match(regExp);\n  return match && match[2].length === 11 ? match[2] : null;\n};\nexport const getVideoTranscript = async videoId => {\n  try {\n    var _videoResponse$data$i, _transcriptResponse$d;\n    const API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY;\n    if (!API_KEY) {\n      throw new Error('YouTube API key is not configured. Please add REACT_APP_YOUTUBE_API_KEY to your environment variables.');\n    }\n\n    // First, get video details to check if video exists\n    const videoResponse = await axios.get(`https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${videoId}&key=${API_KEY}`);\n    if (!((_videoResponse$data$i = videoResponse.data.items) !== null && _videoResponse$data$i !== void 0 && _videoResponse$data$i.length)) {\n      throw new Error('Video not found');\n    }\n\n    // Get transcript using a third-party service that's more reliable\n    const transcriptResponse = await axios.get(`https://youtube-transcript-api.vercel.app/api/transcript?videoId=${videoId}`);\n    if (!((_transcriptResponse$d = transcriptResponse.data) !== null && _transcriptResponse$d !== void 0 && _transcriptResponse$d.transcript)) {\n      throw new Error('No transcript available for this video. Please try a different video with captions.');\n    }\n    return transcriptResponse.data.transcript;\n  } catch (error) {\n    var _error$response, _error$response2, _error$response3, _error$response3$data;\n    console.error('Error fetching transcript:', error);\n    if ((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 403) {\n      throw new Error('API key is invalid or quota exceeded. Please check your YouTube API configuration.');\n    }\n    if ((error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 404) {\n      throw new Error('Video not found or captions are not available.');\n    }\n    if (error !== null && error !== void 0 && (_error$response3 = error.response) !== null && _error$response3 !== void 0 && (_error$response3$data = _error$response3.data) !== null && _error$response3$data !== void 0 && _error$response3$data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Failed to fetch video transcript. Please make sure the video has captions available.');\n  }\n};","map":{"version":3,"names":["axios","extractVideoId","url","regExp","match","length","getVideoTranscript","videoId","_videoResponse$data$i","_transcriptResponse$d","API_KEY","process","env","REACT_APP_YOUTUBE_API_KEY","Error","videoResponse","get","data","items","transcriptResponse","transcript","error","_error$response","_error$response2","_error$response3","_error$response3$data","console","response","status"],"sources":["D:/rvce/src/services/youtubeService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\ninterface TranscriptResponse {\r\n  transcript: string;\r\n}\r\n\r\ninterface VideoResponse {\r\n  items: Array<{\r\n    id: string;\r\n    snippet: {\r\n      title: string;\r\n      description: string;\r\n    };\r\n  }>;\r\n}\r\n\r\ninterface YouTubeTranscriptResponse {\r\n  transcript: string;\r\n  error?: string;\r\n}\r\n\r\nexport const extractVideoId = (url: string): string | null => {\r\n  const regExp = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\r\n  const match = url.match(regExp);\r\n  return (match && match[2].length === 11) ? match[2] : null;\r\n};\r\n\r\nexport const getVideoTranscript = async (videoId: string): Promise<string> => {\r\n  try {\r\n    const API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY;\r\n    \r\n    if (!API_KEY) {\r\n      throw new Error('YouTube API key is not configured. Please add REACT_APP_YOUTUBE_API_KEY to your environment variables.');\r\n    }\r\n\r\n    // First, get video details to check if video exists\r\n    const videoResponse = await axios.get<VideoResponse>(\r\n      `https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${videoId}&key=${API_KEY}`\r\n    );\r\n\r\n    if (!videoResponse.data.items?.length) {\r\n      throw new Error('Video not found');\r\n    }\r\n\r\n    // Get transcript using a third-party service that's more reliable\r\n    const transcriptResponse = await axios.get<YouTubeTranscriptResponse>(\r\n      `https://youtube-transcript-api.vercel.app/api/transcript?videoId=${videoId}`\r\n    );\r\n\r\n    if (!transcriptResponse.data?.transcript) {\r\n      throw new Error('No transcript available for this video. Please try a different video with captions.');\r\n    }\r\n\r\n    return transcriptResponse.data.transcript;\r\n  } catch (error: any) {\r\n    console.error('Error fetching transcript:', error);\r\n    if (error?.response?.status === 403) {\r\n      throw new Error('API key is invalid or quota exceeded. Please check your YouTube API configuration.');\r\n    }\r\n    if (error?.response?.status === 404) {\r\n      throw new Error('Video not found or captions are not available.');\r\n    }\r\n    if (error?.response?.data?.error) {\r\n      throw new Error(error.response.data.error);\r\n    }\r\n    throw new Error('Failed to fetch video transcript. Please make sure the video has captions available.');\r\n  }\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAqBzB,OAAO,MAAMC,cAAc,GAAIC,GAAW,IAAoB;EAC5D,MAAMC,MAAM,GAAG,8DAA8D;EAC7E,MAAMC,KAAK,GAAGF,GAAG,CAACE,KAAK,CAACD,MAAM,CAAC;EAC/B,OAAQC,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,CAACC,MAAM,KAAK,EAAE,GAAID,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI;AAC5D,CAAC;AAED,OAAO,MAAME,kBAAkB,GAAG,MAAOC,OAAe,IAAsB;EAC5E,IAAI;IAAA,IAAAC,qBAAA,EAAAC,qBAAA;IACF,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB;IAErD,IAAI,CAACH,OAAO,EAAE;MACZ,MAAM,IAAII,KAAK,CAAC,wGAAwG,CAAC;IAC3H;;IAEA;IACA,MAAMC,aAAa,GAAG,MAAMf,KAAK,CAACgB,GAAG,CACnC,gEAAgET,OAAO,QAAQG,OAAO,EACxF,CAAC;IAED,IAAI,GAAAF,qBAAA,GAACO,aAAa,CAACE,IAAI,CAACC,KAAK,cAAAV,qBAAA,eAAxBA,qBAAA,CAA0BH,MAAM,GAAE;MACrC,MAAM,IAAIS,KAAK,CAAC,iBAAiB,CAAC;IACpC;;IAEA;IACA,MAAMK,kBAAkB,GAAG,MAAMnB,KAAK,CAACgB,GAAG,CACxC,oEAAoET,OAAO,EAC7E,CAAC;IAED,IAAI,GAAAE,qBAAA,GAACU,kBAAkB,CAACF,IAAI,cAAAR,qBAAA,eAAvBA,qBAAA,CAAyBW,UAAU,GAAE;MACxC,MAAM,IAAIN,KAAK,CAAC,qFAAqF,CAAC;IACxG;IAEA,OAAOK,kBAAkB,CAACF,IAAI,CAACG,UAAU;EAC3C,CAAC,CAAC,OAAOC,KAAU,EAAE;IAAA,IAAAC,eAAA,EAAAC,gBAAA,EAAAC,gBAAA,EAAAC,qBAAA;IACnBC,OAAO,CAACL,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,IAAI,CAAAA,KAAK,aAALA,KAAK,wBAAAC,eAAA,GAALD,KAAK,CAAEM,QAAQ,cAAAL,eAAA,uBAAfA,eAAA,CAAiBM,MAAM,MAAK,GAAG,EAAE;MACnC,MAAM,IAAId,KAAK,CAAC,oFAAoF,CAAC;IACvG;IACA,IAAI,CAAAO,KAAK,aAALA,KAAK,wBAAAE,gBAAA,GAALF,KAAK,CAAEM,QAAQ,cAAAJ,gBAAA,uBAAfA,gBAAA,CAAiBK,MAAM,MAAK,GAAG,EAAE;MACnC,MAAM,IAAId,KAAK,CAAC,gDAAgD,CAAC;IACnE;IACA,IAAIO,KAAK,aAALA,KAAK,gBAAAG,gBAAA,GAALH,KAAK,CAAEM,QAAQ,cAAAH,gBAAA,gBAAAC,qBAAA,GAAfD,gBAAA,CAAiBP,IAAI,cAAAQ,qBAAA,eAArBA,qBAAA,CAAuBJ,KAAK,EAAE;MAChC,MAAM,IAAIP,KAAK,CAACO,KAAK,CAACM,QAAQ,CAACV,IAAI,CAACI,KAAK,CAAC;IAC5C;IACA,MAAM,IAAIP,KAAK,CAAC,sFAAsF,CAAC;EACzG;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}