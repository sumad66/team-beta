{"ast":null,"code":"import axios from 'axios';\n\n// Your YouTube API key\nconst YOUTUBE_API_KEY = 'AIzaSyApXWAoAYayJouq0iKRlMj-3R61VRLqkCE';\nconst API_URL = 'http://localhost:5000/api';\nexport const extractVideoId = url => {\n  try {\n    // Handle different YouTube URL formats\n    const patterns = [/(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|youtube\\.com\\/embed\\/|youtube\\.com\\/v\\/|youtube\\.com\\/watch\\?.*&v=)([^#&?]*).*/, /youtube\\.com\\/shorts\\/([^#&?]*).*/, /youtube\\.com\\/watch\\?.*v=([^#&?]*).*/];\n    for (const pattern of patterns) {\n      const match = url.match(pattern);\n      if (match && match[1] && match[1].length === 11) {\n        return match[1];\n      }\n    }\n\n    // If no pattern matches, try to extract from the URL directly\n    const urlObj = new URL(url);\n    const searchParams = new URLSearchParams(urlObj.search);\n    const videoId = searchParams.get('v');\n    if (videoId && videoId.length === 11) {\n      return videoId;\n    }\n    return null;\n  } catch (error) {\n    console.error('Error extracting video ID:', error);\n    return null;\n  }\n};\nexport const getVideoTranscript = async url => {\n  try {\n    const response = await axios.post(`${API_URL}/transcript`, {\n      url\n    });\n    return response.data.transcript;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('Error fetching transcript:', error);\n    if ((_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Failed to fetch transcript. Please try again.');\n  }\n};","map":{"version":3,"names":["axios","YOUTUBE_API_KEY","API_URL","extractVideoId","url","patterns","pattern","match","length","urlObj","URL","searchParams","URLSearchParams","search","videoId","get","error","console","getVideoTranscript","response","post","data","transcript","_error$response","_error$response$data","Error"],"sources":["D:/rvce/src/services/youtubeService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Your YouTube API key\r\nconst YOUTUBE_API_KEY = 'AIzaSyApXWAoAYayJouq0iKRlMj-3R61VRLqkCE';\r\n\r\ninterface VideoResponse {\r\n  items: Array<{\r\n    id: string;\r\n    snippet: {\r\n      title: string;\r\n      description: string;\r\n    };\r\n  }>;\r\n}\r\n\r\ninterface TranscriptResponse {\r\n  transcript: string;\r\n}\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\nexport const extractVideoId = (url: string): string | null => {\r\n  try {\r\n    // Handle different YouTube URL formats\r\n    const patterns = [\r\n      /(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|youtube\\.com\\/embed\\/|youtube\\.com\\/v\\/|youtube\\.com\\/watch\\?.*&v=)([^#&?]*).*/,\r\n      /youtube\\.com\\/shorts\\/([^#&?]*).*/,\r\n      /youtube\\.com\\/watch\\?.*v=([^#&?]*).*/\r\n    ];\r\n\r\n    for (const pattern of patterns) {\r\n      const match = url.match(pattern);\r\n      if (match && match[1] && match[1].length === 11) {\r\n        return match[1];\r\n      }\r\n    }\r\n\r\n    // If no pattern matches, try to extract from the URL directly\r\n    const urlObj = new URL(url);\r\n    const searchParams = new URLSearchParams(urlObj.search);\r\n    const videoId = searchParams.get('v');\r\n    \r\n    if (videoId && videoId.length === 11) {\r\n      return videoId;\r\n    }\r\n\r\n    return null;\r\n  } catch (error) {\r\n    console.error('Error extracting video ID:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getVideoTranscript = async (url: string): Promise<string> => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/transcript`, { url });\r\n    return response.data.transcript;\r\n  } catch (error: any) {\r\n    console.error('Error fetching transcript:', error);\r\n    if (error.response?.data?.error) {\r\n      throw new Error(error.response.data.error);\r\n    }\r\n    throw new Error('Failed to fetch transcript. Please try again.');\r\n  }\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,eAAe,GAAG,yCAAyC;AAgBjE,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,OAAO,MAAMC,cAAc,GAAIC,GAAW,IAAoB;EAC5D,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,CACf,uHAAuH,EACvH,mCAAmC,EACnC,sCAAsC,CACvC;IAED,KAAK,MAAMC,OAAO,IAAID,QAAQ,EAAE;MAC9B,MAAME,KAAK,GAAGH,GAAG,CAACG,KAAK,CAACD,OAAO,CAAC;MAChC,IAAIC,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,CAACC,MAAM,KAAK,EAAE,EAAE;QAC/C,OAAOD,KAAK,CAAC,CAAC,CAAC;MACjB;IACF;;IAEA;IACA,MAAME,MAAM,GAAG,IAAIC,GAAG,CAACN,GAAG,CAAC;IAC3B,MAAMO,YAAY,GAAG,IAAIC,eAAe,CAACH,MAAM,CAACI,MAAM,CAAC;IACvD,MAAMC,OAAO,GAAGH,YAAY,CAACI,GAAG,CAAC,GAAG,CAAC;IAErC,IAAID,OAAO,IAAIA,OAAO,CAACN,MAAM,KAAK,EAAE,EAAE;MACpC,OAAOM,OAAO;IAChB;IAEA,OAAO,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO,IAAI;EACb;AACF,CAAC;AAED,OAAO,MAAME,kBAAkB,GAAG,MAAOd,GAAW,IAAsB;EACxE,IAAI;IACF,MAAMe,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAAC,GAAGlB,OAAO,aAAa,EAAE;MAAEE;IAAI,CAAC,CAAC;IACnE,OAAOe,QAAQ,CAACE,IAAI,CAACC,UAAU;EACjC,CAAC,CAAC,OAAON,KAAU,EAAE;IAAA,IAAAO,eAAA,EAAAC,oBAAA;IACnBP,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,KAAAO,eAAA,GAAIP,KAAK,CAACG,QAAQ,cAAAI,eAAA,gBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,eAApBA,oBAAA,CAAsBR,KAAK,EAAE;MAC/B,MAAM,IAAIS,KAAK,CAACT,KAAK,CAACG,QAAQ,CAACE,IAAI,CAACL,KAAK,CAAC;IAC5C;IACA,MAAM,IAAIS,KAAK,CAAC,+CAA+C,CAAC;EAClE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}