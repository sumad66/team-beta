{"ast":null,"code":"import axios from 'axios';\n\n// Your YouTube API key\nconst YOUTUBE_API_KEY = 'AIzaSyApXWAoAYayJouq0iKRlMj-3R61VRLqkCE';\nexport const extractVideoId = url => {\n  try {\n    // Handle different YouTube URL formats\n    const patterns = [/(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|youtube\\.com\\/embed\\/|youtube\\.com\\/v\\/|youtube\\.com\\/watch\\?.*&v=)([^#&?]*).*/, /youtube\\.com\\/shorts\\/([^#&?]*).*/, /youtube\\.com\\/watch\\?.*v=([^#&?]*).*/];\n    for (const pattern of patterns) {\n      const match = url.match(pattern);\n      if (match && match[1] && match[1].length === 11) {\n        return match[1];\n      }\n    }\n\n    // If no pattern matches, try to extract from the URL directly\n    const urlObj = new URL(url);\n    const searchParams = new URLSearchParams(urlObj.search);\n    const videoId = searchParams.get('v');\n    if (videoId && videoId.length === 11) {\n      return videoId;\n    }\n    return null;\n  } catch (error) {\n    console.error('Error extracting video ID:', error);\n    return null;\n  }\n};\nexport const getVideoTranscript = async videoId => {\n  try {\n    var _videoResponse$data$i;\n    // First, get video details to check if video exists\n    const videoResponse = await axios.get(`https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${videoId}&key=${YOUTUBE_API_KEY}`);\n    if (!((_videoResponse$data$i = videoResponse.data.items) !== null && _videoResponse$data$i !== void 0 && _videoResponse$data$i.length)) {\n      throw new Error('Video not found. Please check the URL and try again.');\n    }\n    try {\n      var _response$data;\n      // Use a CORS proxy to fetch the transcript\n      const response = await axios.get(`https://cors-anywhere.herokuapp.com/https://youtube-transcript-api.vercel.app/api/transcript?videoId=${videoId}`, {\n        headers: {\n          'Origin': 'http://localhost:3000',\n          'X-Requested-With': 'XMLHttpRequest'\n        }\n      });\n      if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.transcript) {\n        return response.data.transcript;\n      }\n      throw new Error('No transcript available for this video');\n    } catch (transcriptError) {\n      var _transcriptError$mess, _transcriptError$mess2;\n      console.error('Transcript fetch error:', transcriptError);\n\n      // Try alternative method if the first one fails\n      try {\n        var _response$data2;\n        const response = await axios.get(`https://api.allorigins.win/raw?url=${encodeURIComponent(`https://youtube-transcript-api.vercel.app/api/transcript?videoId=${videoId}`)}`);\n        if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.transcript) {\n          return response.data.transcript;\n        }\n      } catch (fallbackError) {\n        console.error('Fallback transcript fetch error:', fallbackError);\n      }\n\n      // Provide more specific error messages based on the error\n      if ((_transcriptError$mess = transcriptError.message) !== null && _transcriptError$mess !== void 0 && _transcriptError$mess.includes('Could not get the transcript')) {\n        throw new Error('This video does not have captions available. Please try a different video.');\n      }\n      if ((_transcriptError$mess2 = transcriptError.message) !== null && _transcriptError$mess2 !== void 0 && _transcriptError$mess2.includes('Could not find a transcript')) {\n        throw new Error('No captions found for this video. Please try a video with captions enabled.');\n      }\n      throw new Error('Could not fetch transcript. Please make sure the video has captions available.');\n    }\n  } catch (error) {\n    var _error$response, _error$response2;\n    console.error('Error:', error);\n    if ((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 403) {\n      throw new Error('API key is invalid or quota exceeded. Please check your YouTube API configuration.');\n    }\n    if ((error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 404) {\n      throw new Error('Video not found. Please check the URL and try again.');\n    }\n    throw error; // Re-throw the original error to preserve the specific error message\n  }\n};","map":{"version":3,"names":["axios","YOUTUBE_API_KEY","extractVideoId","url","patterns","pattern","match","length","urlObj","URL","searchParams","URLSearchParams","search","videoId","get","error","console","getVideoTranscript","_videoResponse$data$i","videoResponse","data","items","Error","_response$data","response","headers","transcript","transcriptError","_transcriptError$mess","_transcriptError$mess2","_response$data2","encodeURIComponent","fallbackError","message","includes","_error$response","_error$response2","status"],"sources":["D:/rvce/src/services/youtubeService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Your YouTube API key\r\nconst YOUTUBE_API_KEY = 'AIzaSyApXWAoAYayJouq0iKRlMj-3R61VRLqkCE';\r\n\r\ninterface VideoResponse {\r\n  items: Array<{\r\n    id: string;\r\n    snippet: {\r\n      title: string;\r\n      description: string;\r\n    };\r\n  }>;\r\n}\r\n\r\ninterface TranscriptResponse {\r\n  transcript: string;\r\n}\r\n\r\nexport const extractVideoId = (url: string): string | null => {\r\n  try {\r\n    // Handle different YouTube URL formats\r\n    const patterns = [\r\n      /(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|youtube\\.com\\/embed\\/|youtube\\.com\\/v\\/|youtube\\.com\\/watch\\?.*&v=)([^#&?]*).*/,\r\n      /youtube\\.com\\/shorts\\/([^#&?]*).*/,\r\n      /youtube\\.com\\/watch\\?.*v=([^#&?]*).*/\r\n    ];\r\n\r\n    for (const pattern of patterns) {\r\n      const match = url.match(pattern);\r\n      if (match && match[1] && match[1].length === 11) {\r\n        return match[1];\r\n      }\r\n    }\r\n\r\n    // If no pattern matches, try to extract from the URL directly\r\n    const urlObj = new URL(url);\r\n    const searchParams = new URLSearchParams(urlObj.search);\r\n    const videoId = searchParams.get('v');\r\n    \r\n    if (videoId && videoId.length === 11) {\r\n      return videoId;\r\n    }\r\n\r\n    return null;\r\n  } catch (error) {\r\n    console.error('Error extracting video ID:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getVideoTranscript = async (videoId: string): Promise<string> => {\r\n  try {\r\n    // First, get video details to check if video exists\r\n    const videoResponse = await axios.get<VideoResponse>(\r\n      `https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${videoId}&key=${YOUTUBE_API_KEY}`\r\n    );\r\n\r\n    if (!videoResponse.data.items?.length) {\r\n      throw new Error('Video not found. Please check the URL and try again.');\r\n    }\r\n\r\n    try {\r\n      // Use a CORS proxy to fetch the transcript\r\n      const response = await axios.get<TranscriptResponse>(\r\n        `https://cors-anywhere.herokuapp.com/https://youtube-transcript-api.vercel.app/api/transcript?videoId=${videoId}`,\r\n        {\r\n          headers: {\r\n            'Origin': 'http://localhost:3000',\r\n            'X-Requested-With': 'XMLHttpRequest'\r\n          }\r\n        }\r\n      );\r\n      \r\n      if (response.data?.transcript) {\r\n        return response.data.transcript;\r\n      }\r\n\r\n      throw new Error('No transcript available for this video');\r\n    } catch (transcriptError: any) {\r\n      console.error('Transcript fetch error:', transcriptError);\r\n      \r\n      // Try alternative method if the first one fails\r\n      try {\r\n        const response = await axios.get<TranscriptResponse>(\r\n          `https://api.allorigins.win/raw?url=${encodeURIComponent(`https://youtube-transcript-api.vercel.app/api/transcript?videoId=${videoId}`)}`\r\n        );\r\n        \r\n        if (response.data?.transcript) {\r\n          return response.data.transcript;\r\n        }\r\n      } catch (fallbackError) {\r\n        console.error('Fallback transcript fetch error:', fallbackError);\r\n      }\r\n      \r\n      // Provide more specific error messages based on the error\r\n      if (transcriptError.message?.includes('Could not get the transcript')) {\r\n        throw new Error('This video does not have captions available. Please try a different video.');\r\n      }\r\n      if (transcriptError.message?.includes('Could not find a transcript')) {\r\n        throw new Error('No captions found for this video. Please try a video with captions enabled.');\r\n      }\r\n      \r\n      throw new Error('Could not fetch transcript. Please make sure the video has captions available.');\r\n    }\r\n  } catch (error: any) {\r\n    console.error('Error:', error);\r\n    if (error?.response?.status === 403) {\r\n      throw new Error('API key is invalid or quota exceeded. Please check your YouTube API configuration.');\r\n    }\r\n    if (error?.response?.status === 404) {\r\n      throw new Error('Video not found. Please check the URL and try again.');\r\n    }\r\n    throw error; // Re-throw the original error to preserve the specific error message\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}